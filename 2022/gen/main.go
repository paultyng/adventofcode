package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"text/template"
)

func main() {
	ctx := context.Background()

	err := generateRunner(ctx, "./runner.generated.go")
	if err != nil {
		log.Fatal(err)
	}

	err = generateMissingDayFiles(ctx)
	if err != nil {
		log.Fatal(err)
	}
}

func generateRunner(ctx context.Context, path string) error {
	data := "" +
		"// Code generated by go generate - DO NOT EDIT.\n" +
		"\n" +
		"package main\n" +
		"\n" +
		"import \"fmt\"\n" +
		"\n" +
		"func runPartFactory(currentDay int, part string) runPart {\n" +
		"	switch fmt.Sprintf(\"Day%dPart%s\", currentDay, part) {\n" +
		"	default:\n" +
		"		panic(fmt.Sprintf(\"day %d part %s not implemented\", currentDay, part))\n" +
		""

	for day := 1; day <= 25; day++ {
		for part := 1; part <= 2; part++ {
			data += fmt.Sprintf("	case \"Day%[1]dPart%[2]d\":\n		return runDay%[1]dPart%[2]d\n", day, part)
		}
	}

	data += "" +
		"	}\n" +
		"}\n"

	_ = os.Remove(path)
	err := os.WriteFile(path, []byte(data), 0644)
	if err != nil {
		return fmt.Errorf("unable to write file: %w", err)
	}

	return nil
}

func generateMissingDayFiles(ctx context.Context) error {
	goTmpl, err := template.ParseFiles("./day.go.template")
	if err != nil {
		return fmt.Errorf("unable to parse template: %w", err)
	}
	goTestTmpl, err := template.ParseFiles("./day_test.go.template")
	if err != nil {
		return fmt.Errorf("unable to parse template: %w", err)
	}

	for day := 1; day <= 25; day++ {
		for path, tmpl := range map[string]*template.Template{
			fmt.Sprintf("./day%d.go", day):         goTmpl,
			fmt.Sprintf("./day%d_test.go", day):    goTestTmpl,
			fmt.Sprintf("./day%d.input.test", day): nil,
			fmt.Sprintf("./day%d.input", day):      nil,
		} {
			if _, err := os.Stat(path); err == nil {
				continue
			}

			f, err := os.Create(path)
			if err != nil {
				return fmt.Errorf("unable to create file %q: %w", path, err)
			}
			// TODO: do this in the loop?
			defer f.Close()

			if tmpl == nil {
				f.Close()
				continue
			}
			err = tmpl.Execute(f, struct {
				Day int
			}{
				Day: day,
			})
			if err != nil {
				return fmt.Errorf("unable to execute template (%d): %w", day, err)
			}

			f.Close()
		}
	}

	return nil
}
